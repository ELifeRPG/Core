@inherits LayoutComponentBase

@inject ISettingsStore SettingsStore

<PageTitle>WebUI</PageTitle>

<MudThemeProvider @bind-IsDarkMode="@(_currentDarkMode)" Theme="@(_theme)"/>
<MudDialogProvider/>
<MudSnackbarProvider/>


<MudLayout>

    <MudAppBar Class="docs-appbar-filter" Color="Color.Transparent" Elevation="0"></MudAppBar>
    <MudAppBar Class="docs-appbar" Color="Color.Transparent" Elevation="0">
        <NavLink ActiveClass="d-flex me-4" href="/" style="min-width: 200px;">
            <MudImage Src="images/menu-logo-blue.png" Fluid="@true" />
        </NavLink>
        <MudButton Href="/" Color="Color.Inherit" Variant="Variant.Text">Home</MudButton>
        <MudButton Href="/characters" Color="Color.Inherit" Variant="Variant.Text">Characters</MudButton>
        <MudButton Href="/companies" Color="Color.Inherit" Variant="Variant.Text">Companies</MudButton>
        <MudButton Href="/administration" Color="Color.Inherit" Variant="Variant.Text">Administration</MudButton>
        <MudSpacer/>
        <MudIconButton Icon="@(Icons.Filled.LightMode)" OnClick="@(async () => await SettingsStore.ToggleDarkMode())"></MudIconButton>
        <MudIconButton Icon="@(Icons.Custom.Brands.GitHub)" Color="Color.Inherit" Edge="Edge.End" Href="https://github.com/ELifeRPG"/>
    </MudAppBar>

    @Body

</MudLayout>


@code
{
    private bool _currentDarkMode;
    private MudTheme _theme = new();

    protected override void OnInitialized()
    {
        SettingsStore.DarkModeChanged += async darkMode =>
        {
            _currentDarkMode = darkMode;
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };
    }

    protected override async Task OnInitializedAsync()
    {
        _currentDarkMode = await SettingsStore.GetDarkMode();
    }
}
